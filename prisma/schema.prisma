generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserTypeEnum {
  client    @map("client")
  supplier  @map("supplier")
}

enum AdminRoleEnum {
  admin  @map("admin")
  super_admin @map("super_admin")
}

model Admins {
  id         String         @map("id")          @db.Uuid       @default(dbgenerated("GEN_RANDOM_UUID()"))
  name       String         @map("name")        @db.VarChar() 
  phone      String         @map("phone")       @db.VarChar()
  password   String         @map("password")    @db.VarChar()
  role       AdminRoleEnum                                     @default(admin)
  createdAt  DateTime       @map("created_at")  @db.Timestamp  @default(now())
  updatedAt  DateTime       @map("updated_at")  @db.Timestamp  @updatedAt
  deletedAt  DateTime?      @map("deleted_at")  @db.Timestamp

  permissions Permissions[]

  @@id([ id ])
  @@map("admins")
}

model Roles {
  id         String         @map("id")          @db.Uuid       @default(dbgenerated("GEN_RANDOM_UUID()"))
  name       String         @map("name")        @db.VarChar() 

  permissions Permissions[]
  @@id([ id ])
  @@map("roles")
}

model Permissions {
  id         String         @map("id")          @db.Uuid       @default(dbgenerated("GEN_RANDOM_UUID()"))
  name       String         @map("name")        @db.VarChar() 
  role_id    String         @map("role_id")     @db.Uuid() 

  admins Admins[]
  role  Roles  @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([ id ])
  @@map("permissions")
}

model Users {
  id         String         @map("id")          @db.Uuid           @default(dbgenerated("GEN_RANDOM_UUID()"))
  name       String         @map("name")        @db.VarChar() 
  phone      String         @map("phone")       @db.VarChar()
  type       UserTypeEnum
  debt       Decimal        @map("debt")        @db.Decimal(10,3)  @default(0)
  createdAt  DateTime       @map("created_at")  @db.Timestamp      @default(now())
  updatedAt  DateTime       @map("updated_at")  @db.Timestamp      @updatedAt
  deletedAt  DateTime?      @map("deleted_at")  @db.Timestamp

  orders     Order[]

  @@id([ id ])
  @@map("users")
}

model Products {
  id               String         @map("id")               @db.Uuid       @default(dbgenerated("GEN_RANDOM_UUID()"))
  name             String         @map("name")             @db.VarChar() 
  count            Int            @map("count")            @db.Integer()
  unit             String         @map("unit")             @db.VarChar()
  min_amount       Int            @map("min_amount")       @db.Integer()
  cost             Decimal        @map("cost")             @db.Decimal(10,3)
  avarage_cost     Decimal        @map("avarage_cost")     @db.Decimal(20,12)
  selling_price    Decimal        @map("selling_price")    @db.Decimal(10,3)
  wholesale_price  Decimal        @map("wholesale_price")  @db.Decimal(10,3)
  image            String?        @map("role")             @db.VarChar()
  category         String?        @map("category")         @db.VarChar()
  createdAt        DateTime       @map("created_at")       @db.Timestamp  @default(now())
  updatedAt        DateTime       @map("updated_at")       @db.Timestamp  @updatedAt
  deletedAt        DateTime?      @map("deleted_at")       @db.Timestamp

  incomingProducts IncomingProducts[]
  orderProducts    OrderProducts[]

  @@id([ id ])
  @@map("products")
}

model IncomingProducts {
  id               String         @map("id")               @db.Uuid       @default(dbgenerated("GEN_RANDOM_UUID()"))
  productId        String         @map("product_id")       @db.Uuid() 
  count            Int            @map("count")            @db.Integer()
  cost             Decimal        @map("cost")             @db.Decimal(10,3)
  createdAt        DateTime       @map("created_at")       @db.Timestamp  @default(now())
  updatedAt        DateTime       @map("updated_at")       @db.Timestamp  @updatedAt
  deletedAt        DateTime?      @map("deleted_at")       @db.Timestamp

  product  Products  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([ id ])
  @@map("incoming_products")
}

model Order {
  id         String       @map("id")            @db.Uuid       @default(dbgenerated("GEN_RANDOM_UUID()"))
  clientId   String       @map("client_id")     @db.Uuid() 
  sum        Decimal      @map("sum")           @db.Decimal(10,3)
  debt       Decimal      @map("debt")          @db.Decimal(10,3)
  createdAt  DateTime     @map("created_at")    @db.Timestamp  @default(now())
  updatedAt  DateTime     @map("updated_at")    @db.Timestamp  @updatedAt
  deletedAt  DateTime?    @map("deleted_at")    @db.Timestamp

  products   OrderProducts[]
  client     Users @relation(fields: [clientId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([ id ])
  @@map("order")
}

model OrderProducts {
  id               String         @map("id")               @db.Uuid       @default(dbgenerated("GEN_RANDOM_UUID()"))
  orderId          String         @map("order_id")         @db.Uuid() 
  productId        String         @map("product_id")       @db.Uuid() 
  price            Decimal        @map("price")            @db.Decimal(10,3)
  cost             Decimal        @map("cost")             @db.Decimal(10,3)
  avarage_cost     Decimal        @map("avarage_cost")     @db.Decimal(10,3)
  count            Int            @map("count")            @db.Integer()
  createdAt        DateTime       @map("created_at")       @db.Timestamp  @default(now())
  updatedAt        DateTime       @map("updated_at")       @db.Timestamp  @updatedAt
  deletedAt        DateTime?      @map("deleted_at")       @db.Timestamp

  order    Order     @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  product  Products  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([ id ])
  @@map("order_products")
}